#!/usr/bin/lua
-- vim: ts=2 sw=2 ai
-- ------------------------------------------------------------------------- --
-- mqtt client v0.1 2014-12-25, mm@c-base.org
-- ------------------------------------------------------------------------- --
package.path = '/usr/share/mqtt-sender/?.lua;/etc/mqtt-sender/?.lua;/etc/mqtt-sender/modules/?.lua;' .. package.path
require "daemon"
require "luci.json"
local MQTT = require("mqtt")

function file_exists(name)
   local f=io.open(name,"r")
   if f~=nil then io.close(f) return true else return false end
end

hostname = ""
if (file_exists("/bin/hostname")) then
	local pipe = io.popen("/bin/hostname -s")
	hostname = pipe:read("*line")
	pipe:close()
else
	local pipe = io.popen("uci get system.@system[0].hostname")
	hostname = pipe:read("*line")
	pipe:close()
end

local id = "mqtt_send_" .. hostname

topics = {}

require "config"

-- Is called when a message from one of the subscribed topics comes in.
function callback(topic, message)
	if (topic == "info/time") then
		print("It is the time: " .. message)
	end
	if (topic == "ampel/nerd") then
		decoded = luci.json.decode(message)
		print("decoded ampel message")
		value = decoded['red']
		print("red: " .. value)
		local gpio = 15	
		os.execute("echo " .. value .. " > /sys/class/gpio/gpio" .. gpio .. "/value")
		value = decoded['green']
		print("green: " .. value)
		local gpio = 14
		os.execute("echo " .. value .. " > /sys/class/gpio/gpio" .. gpio .. "/value")
	end
    if (message == "quit") then running = false end
end


local mqtt = MQTT.client.create(server, port, callback)

daemon("/var/run/mqtt-sender.pid")

log("INFO","starting")
while (1) do
    local error_message = nil
	local stats = nil
    
-- make sure that we are connected and are subscribed to our topics
-- before we call the handler()-method in every loop.
    if ( not mqtt.connected ) then
		if ( string.len(presence) > 8 ) then
    	    error_message = mqtt:connect(id, presence, 0, 1, "")
		else
    	    error_message = mqtt:connect(id)
		end
        if ( error_message ) then
            log("ERR",error_message)
            error_message = nil
        else
            log("INFO","connected")
            mqtt:publish(presence, "1", 1)
	    mqtt:subscribe({"info/time"})
	    mqtt:subscribe({"ampel/nerd"})
            if ( error_message ) then
                log("ERR",error_message)
                error_message = nil
            end
        end
    end

-- Now we are sure that we are connected
    if ( mqtt.connected ) then
        error_message = mqtt:handler()
        if ( error_message ) then
            log("ERR",error_message)
            error_message = nil
        end
		process(mqtt,prefix,topics)
    end
    socket.sleep(1)
end
